// Generated by: main
// TypeWriter: container
// Directive: +gen on main.Id

// See http://clipperhouse.github.io/gen for documentation

// List is a modification of http://golang.org/pkg/container/list/
// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found at http://golang.org/LICENSE

// Set is a modification of https://github.com/deckarep/golang-set
// The MIT License (MIT)
// Copyright (c) 2013 Ralph Caraveo (deckarep@gmail.com)

package main

// The primary type that represents a set
type IdSet map[Id]struct{}

// Creates and returns a reference to an empty set.
func NewIdSet() IdSet {
	return make(IdSet)
}

// Creates and returns a reference to a set from an existing slice
func NewIdSetFromSlice(s []Id) IdSet {
	a := NewIdSet()
	for _, item := range s {
		a.Add(item)
	}
	return a
}

// Adds an item to the current set if it doesn't already exist in the set.
func (set IdSet) Add(i Id) bool {
	_, found := set[i]
	set[i] = struct{}{}
	return !found //False if it existed already
}

// Determines if a given item is already in the set.
func (set IdSet) Contains(i Id) bool {
	_, found := set[i]
	return found
}

// Determines if the given items are all in the set
func (set IdSet) ContainsAll(i ...Id) bool {
	allSet := NewIdSetFromSlice(i)
	if allSet.IsSubset(set) {
		return true
	}
	return false
}

// Determines if every item in the other set is in this set.
func (set IdSet) IsSubset(other IdSet) bool {
	for elem := range set {
		if !other.Contains(elem) {
			return false
		}
	}
	return true
}

// Determines if every item of this set is in the other set.
func (set IdSet) IsSuperset(other IdSet) bool {
	return other.IsSubset(set)
}

// Returns a new set with all items in both sets.
func (set IdSet) Union(other IdSet) IdSet {
	unionedSet := NewIdSet()

	for elem := range set {
		unionedSet.Add(elem)
	}
	for elem := range other {
		unionedSet.Add(elem)
	}
	return unionedSet
}

// Returns a new set with items that exist only in both sets.
func (set IdSet) Intersect(other IdSet) IdSet {
	intersection := NewIdSet()
	// loop over smaller set
	if set.Cardinality() < other.Cardinality() {
		for elem := range set {
			if other.Contains(elem) {
				intersection.Add(elem)
			}
		}
	} else {
		for elem := range other {
			if set.Contains(elem) {
				intersection.Add(elem)
			}
		}
	}
	return intersection
}

// Returns a new set with items in the current set but not in the other set
func (set IdSet) Difference(other IdSet) IdSet {
	differencedSet := NewIdSet()
	for elem := range set {
		if !other.Contains(elem) {
			differencedSet.Add(elem)
		}
	}
	return differencedSet
}

// Returns a new set with items in the current set or the other set but not in both.
func (set IdSet) SymmetricDifference(other IdSet) IdSet {
	aDiff := set.Difference(other)
	bDiff := other.Difference(set)
	return aDiff.Union(bDiff)
}

// Clears the entire set to be the empty set.
func (set *IdSet) Clear() {
	*set = make(IdSet)
}

// Allows the removal of a single item in the set.
func (set IdSet) Remove(i Id) {
	delete(set, i)
}

// Cardinality returns how many items are currently in the set.
func (set IdSet) Cardinality() int {
	return len(set)
}

// Iter() returns a channel of type Id that you can range over.
func (set IdSet) Iter() <-chan Id {
	ch := make(chan Id)
	go func() {
		for elem := range set {
			ch <- elem
		}
		close(ch)
	}()

	return ch
}

// Equal determines if two sets are equal to each other.
// If they both are the same size and have the same items they are considered equal.
// Order of items is not relevent for sets to be equal.
func (set IdSet) Equal(other IdSet) bool {
	if set.Cardinality() != other.Cardinality() {
		return false
	}
	for elem := range set {
		if !other.Contains(elem) {
			return false
		}
	}
	return true
}

// Returns a clone of the set.
// Does NOT clone the underlying elements.
func (set IdSet) Clone() IdSet {
	clonedSet := NewIdSet()
	for elem := range set {
		clonedSet.Add(elem)
	}
	return clonedSet
}

// IdElement is an element of a linked list.
type IdElement struct {
	// Next and previous pointers in the doubly-linked list of elements.
	// To simplify the implementation, internally a list l is implemented
	// as a ring, such that &l.root is both the next element of the last
	// list element (l.Back()) and the previous element of the first list
	// element (l.Front()).
	next, prev *IdElement

	// The list to which this element belongs.
	list *IdList

	// The value stored with this element.
	Value Id
}

// Next returns the next list element or nil.
func (e *IdElement) Next() *IdElement {
	if p := e.next; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

// Prev returns the previous list element or nil.
func (e *IdElement) Prev() *IdElement {
	if p := e.prev; e.list != nil && p != &e.list.root {
		return p
	}
	return nil
}

// IdList represents a doubly linked list.
// The zero value for IdList is an empty list ready to use.
type IdList struct {
	root IdElement // sentinel list element, only &root, root.prev, and root.next are used
	len  int       // current list length excluding (this) sentinel element
}

// Init initializes or clears list l.
func (l *IdList) Init() *IdList {
	l.root.next = &l.root
	l.root.prev = &l.root
	l.len = 0
	return l
}

// New returns an initialized list.
func NewIdList() *IdList { return new(IdList).Init() }

// Len returns the number of elements of list l.
// The complexity is O(1).
func (l *IdList) Len() int { return l.len }

// Front returns the first element of list l or nil.
func (l *IdList) Front() *IdElement {
	if l.len == 0 {
		return nil
	}
	return l.root.next
}

// Back returns the last element of list l or nil.
func (l *IdList) Back() *IdElement {
	if l.len == 0 {
		return nil
	}
	return l.root.prev
}

// lazyInit lazily initializes a zero IdList value.
func (l *IdList) lazyInit() {
	if l.root.next == nil {
		l.Init()
	}
}

// insert inserts e after at, increments l.len, and returns e.
func (l *IdList) insert(e, at *IdElement) *IdElement {
	n := at.next
	at.next = e
	e.prev = at
	e.next = n
	n.prev = e
	e.list = l
	l.len++
	return e
}

// insertValue is a convenience wrapper for insert(&IdElement{Value: v}, at).
func (l *IdList) insertValue(v Id, at *IdElement) *IdElement {
	return l.insert(&IdElement{Value: v}, at)
}

// remove removes e from its list, decrements l.len, and returns e.
func (l *IdList) remove(e *IdElement) *IdElement {
	e.prev.next = e.next
	e.next.prev = e.prev
	e.next = nil // avoid memory leaks
	e.prev = nil // avoid memory leaks
	e.list = nil
	l.len--
	return e
}

// Remove removes e from l if e is an element of list l.
// It returns the element value e.Value.
func (l *IdList) Remove(e *IdElement) Id {
	if e.list == l {
		// if e.list == l, l must have been initialized when e was inserted
		// in l or l == nil (e is a zero IdElement) and l.remove will crash
		l.remove(e)
	}
	return e.Value
}

// PushFront inserts a new element e with value v at the front of list l and returns e.
func (l *IdList) PushFront(v Id) *IdElement {
	l.lazyInit()
	return l.insertValue(v, &l.root)
}

// PushBack inserts a new element e with value v at the back of list l and returns e.
func (l *IdList) PushBack(v Id) *IdElement {
	l.lazyInit()
	return l.insertValue(v, l.root.prev)
}

// InsertBefore inserts a new element e with value v immediately before mark and returns e.
// If mark is not an element of l, the list is not modified.
func (l *IdList) InsertBefore(v Id, mark *IdElement) *IdElement {
	if mark.list != l {
		return nil
	}
	// see comment in IdList.Remove about initialization of l
	return l.insertValue(v, mark.prev)
}

// InsertAfter inserts a new element e with value v immediately after mark and returns e.
// If mark is not an element of l, the list is not modified.
func (l *IdList) InsertAfter(v Id, mark *IdElement) *IdElement {
	if mark.list != l {
		return nil
	}
	// see comment in IdList.Remove about initialization of l
	return l.insertValue(v, mark)
}

// MoveToFront moves element e to the front of list l.
// If e is not an element of l, the list is not modified.
func (l *IdList) MoveToFront(e *IdElement) {
	if e.list != l || l.root.next == e {
		return
	}
	// see comment in IdList.Remove about initialization of l
	l.insert(l.remove(e), &l.root)
}

// MoveToBack moves element e to the back of list l.
// If e is not an element of l, the list is not modified.
func (l *IdList) MoveToBack(e *IdElement) {
	if e.list != l || l.root.prev == e {
		return
	}
	// see comment in IdList.Remove about initialization of l
	l.insert(l.remove(e), l.root.prev)
}

// MoveBefore moves element e to its new position before mark.
// If e or mark is not an element of l, or e == mark, the list is not modified.
func (l *IdList) MoveBefore(e, mark *IdElement) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.insert(l.remove(e), mark.prev)
}

// MoveAfter moves element e to its new position after mark.
// If e is not an element of l, or e == mark, the list is not modified.
func (l *IdList) MoveAfter(e, mark *IdElement) {
	if e.list != l || e == mark || mark.list != l {
		return
	}
	l.insert(l.remove(e), mark)
}

// PushBackList inserts a copy of an other list at the back of list l.
// The lists l and other may be the same.
func (l *IdList) PushBackList(other *IdList) {
	l.lazyInit()
	for i, e := other.Len(), other.Front(); i > 0; i, e = i-1, e.Next() {
		l.insertValue(e.Value, l.root.prev)
	}
}

// PushFrontList inserts a copy of an other list at the front of list l.
// The lists l and other may be the same.
func (l *IdList) PushFrontList(other *IdList) {
	l.lazyInit()
	for i, e := other.Len(), other.Back(); i > 0; i, e = i-1, e.Prev() {
		l.insertValue(e.Value, &l.root)
	}
}
